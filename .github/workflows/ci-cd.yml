name: LeafPan CI/CD 流水线

on:
  push:
    branches: [ master ]

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: leafpan

jobs:
  # 后端构建作业
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Java 17 环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Maven 构建后端应用
      run: |
        cd backend
        mvn clean package -DskipTests -B
    
    - name: 上传后端构建产物
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar
        retention-days: 30

  # 前端构建作业
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Node.js 18 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: 安装前端依赖
      run: |
        cd frontend
        npm install
    
    - name: 构建前端应用
      run: |
        cd frontend
        npm run build
    
    - name: 上传前端构建产物
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30

  # Docker镜像构建和推送作业
  build-and-push:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 下载后端构建产物
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/target/
    
    - name: 下载前端构建产物
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
    
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登录容器镜像仓库
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: 构建并推送后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 基础设施部署作业 (MySQL和MinIO)
  infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: 配置 kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        # 列出所有可用的上下文
        kubectl config get-contexts
        # 使用当前上下文（不需要KUBE_CONTEXT）
        kubectl config current-context
        kubectl config view
    
    - name: 创建命名空间
      run: |
        kubectl apply -f k8s/namespace.yaml
    
    - name: 部署 MySQL 数据库
      run: |
        kubectl apply -f k8s/mysql-delop.yaml
        
        # 等待MySQL启动完成
        kubectl wait --for=condition=ready pod -l app=mysql -n leafpan --timeout=300s
        echo "MySQL 数据库已部署到你的Kubernetes集群"
    
    - name: 部署 MinIO 对象存储
      run: |
        kubectl apply -f k8s/minio-delop.yaml
        
        # 等待MinIO启动完成
        kubectl wait --for=condition=ready pod -l app=minio -n leafpan --timeout=300s
        echo "MinIO 对象存储已部署到你的Kubernetes集群"
    
    - name: 部署 Redis 缓存
      run: |
        kubectl apply -f k8s/redis-delop.yaml
        
        # 等待Redis启动完成
        kubectl wait --for=condition=ready pod -l app=redis -n leafpan --timeout=300s
        echo "Redis 缓存已部署到你的Kubernetes集群"

  # 应用部署到Kubernetes作业
  deploy:
    needs: [build-and-push, infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: 配置 kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        # 列出所有可用的上下文
        kubectl config get-contexts
        # 使用当前上下文（不需要KUBE_CONTEXT）
        kubectl config current-context
    
    - name: 部署后端和前端应用
      run: |
        cd k8s
        
        # 部署后端应用
        kubectl apply -f backend-delop.yaml
        
        # 部署前端应用
        kubectl apply -f frontend-delop.yaml
        
        # 更新镜像版本
        kubectl set image deployment/backend backend=${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} -n leafpan
        kubectl set image deployment/frontend frontend=${{ secrets.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} -n leafpan
        
        # 等待部署完成
        kubectl rollout status deployment/backend -n leafpan --timeout=300s
        kubectl rollout status deployment/frontend -n leafpan --timeout=300s
        
        # 健康检查
        kubectl get pods -n leafpan
        kubectl get services -n leafpan
        
        echo "应用部署完成"