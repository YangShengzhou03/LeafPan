name: 自动部署服务到k8s集群

on:
  push:
    branches: [ master ]  # 触发分支为master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      # 步骤1：登录到阿里ACR镜像仓库
      - name: 登录ACR镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
        
      # 验证ACR登录
      - name: 验证ACR登录
        run: |
          echo "验证ACR镜像仓库登录状态..."
          echo "ACR Registry: ${{ secrets.ACR_REGISTRY }}"
          echo "ACR Username: ${{ secrets.ACR_USERNAME }}"
          docker login ${{ secrets.ACR_REGISTRY }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
          docker images

      # 设置Docker Buildx
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 后端编译打包（生成JAR包）
      - name: 配置Java环境（用于Maven编译）
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 用Maven编译后端代码生成JAR包
        run: mvn clean package -DskipTests
        working-directory: ./backend

      # 步骤2：构建并推送后端镜像
      - name: 构建后端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-backend:${{ github.sha }}
            ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 前端编译打包（生成dist目录）
      - name: 配置Node环境（用于前端编译）
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 安装前端依赖并构建生成dist目录
        run: |
          npm install
          npm run build
        working-directory: ./frontend

      # 步骤3：构建并推送前端镜像
      - name: 构建前端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-frontend:${{ github.sha }}
            ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 步骤4：配置kubectl（确保能连接集群）
      - name: 配置kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
          kubectl get nodes  # 验证连接

      # 步骤5：创建命名空间
      - name: 创建命名空间
        run: kubectl apply -f k8s/namespace.yaml

      # 步骤6：部署基础设施（MySQL、MinIO、Redis）
      - name: 部署基础设施
        run: |
          kubectl apply -f k8s/mysql-delop.yaml
          kubectl apply -f k8s/minio-delop.yaml
          kubectl apply -f k8s/redis-delop.yaml
          
          # 等待基础设施启动完成
          kubectl wait --for=condition=ready pod -l app=mysql -n leafpan --timeout=300s
          kubectl wait --for=condition=ready pod -l app=minio -n leafpan --timeout=300s
          kubectl wait --for=condition=ready pod -l app=redis -n leafpan --timeout=300s

      # 步骤7：部署后端基础配置
      - name: 部署后端基础配置
        run: kubectl apply -f k8s/backend-delop.yaml

      # 步骤8：更新后端镜像
      - name: 部署后端
        run: |
          kubectl set image deployment/backend backend=${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-backend:${{ github.sha }} -n leafpan
          kubectl rollout status deployment/backend -n leafpan

      # 步骤9：部署前端基础配置
      - name: 部署前端基础配置
        run: kubectl apply -f k8s/frontend-delop.yaml

      # 步骤10：更新前端镜像
      - name: 部署前端
        run: |
          kubectl set image deployment/frontend frontend=${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/leafpan-frontend:${{ github.sha }} -n leafpan
          kubectl rollout status deployment/frontend -n leafpan

      # 步骤11：健康检查
      - name: 健康检查
        run: |
          kubectl get pods -n leafpan
          kubectl get services -n leafpan
          echo "LeafPan应用部署完成"