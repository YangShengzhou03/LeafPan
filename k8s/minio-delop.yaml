apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: leafpan
type: Opaque
data:
  # Base64编码的访问密钥: minioadmin
  MINIO_ACCESS_KEY: bWluaW9hZG1pbg==
  # Base64编码的秘密密钥: minioadmin
  MINIO_SECRET_KEY: bWluaW9hZG1pbg==

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: leafpan
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 32Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: leafpan
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        ports:
        - containerPort: 9000
        - containerPort: 9001
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_SECRET_KEY
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: leafpan
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: console
      protocol: TCP
      port: 9001
      targetPort: 9001
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: leafpan
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
spec:
  rules:
  - host: minio.leafpan.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-service
            port:
              number: 9001

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  namespace: leafpan
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-setup
        image: minio/mc:latest
        command:
        - /bin/sh
        - -c
        - |
          # 等待MinIO服务启动
          sleep 30
          
          # 配置MinIO客户端
          mc alias set minio http://minio-service:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
          
          # 创建存储桶
          mc mb minio/data --ignore-existing
          mc mb minio/avatar --ignore-existing
          
          # 设置存储桶策略为公共读取
          mc anonymous set download minio/data
          mc anonymous set download minio/avatar
          
          echo "MinIO setup completed successfully"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_SECRET_KEY